De esta manera hacemos una linea que sea roja si el valor que ponemos es invalido y que se quede como negra si lo que queremos poner es valido y cumple las reglas que hayamos puesto
input:invalid {
    border: 2px dashed red;
}
input:valid{
    border: 2px soid black;
}

Crear una regla CSS:

Selector: Puede ser el nombre de una etiqueta, puede ser el nombre de una clase que le hemos dado a un conjunto de elementos, puede ser una identificacion, pueden ser muchos tipos 
diferentes de selectores
Propiedad y valor: Es un par de valores, el valor sera lo que afectara en nuestra propiedad. 
Una regla CSS puede incluir tantos pares de valroes de propiedad como desee.
Siempre debes acabar cada uno con un punto y coma.
selector{
    propiedad: valor ;
    propiedad2: valor;
    propiedad3: valor;
}

Si queremos poner en el selector un id debemos poner primero "#" seguido del id que queremos utilizar.
Si queremos poner en el selector una clase debemos poner primero "." seguido de la clase que queremos utilizar.

Si ponemos una regla justo debajo de otra con las mismas propiedades pero con valores distintos anularan la regla anterior y cargaran esta.
Otra manera de anular reglas es ponerlas directamente en el HTML con el atributo "style" pero esto no es muy buena practica ya que es mejor separar el CSS del HTML.

main{
    background-color: #red !important;
}

main{
    background-color: #green ;
}

De esta manera pondra el fondo de color verde ya que anulamos la primera regla, pero si queremos que sea la primera la que se ejecute solo tenemos que ponerle !important al final de la
regla que queremos que no se salte, aun asi tampoco es una buena practica ya que nos estamos cargando la cascada de nuestro CSS

Otra manera de anular las reglas es poniendo un nuevo css debajo del que tenemos en nuestra pagina es decir:
<link rel="stylesheet" type="text/css" href="..\CSS\style.css">
<link rel="stylesheet" type="text/css" href="..\CSS\style2.css">
El dos sera el que mande y no hara caso al primer archivo css

selector{
    border: inherit;/*Esto se hace para que erede del padre que seria recipe, si cambiamos algo en el padre cambiara en todos los que tengan la herencia*/
    color: initial; /*Establece el color de la fuente principal, no el heredado, nos puede servir para utilizar la fuente principal ya sea color, tama√±o, o cualquier
    otra modificacion y no algo heredado.*/
}
selector{
    all: unset;/*All lo utilizamos para seleccionar todos los elementos que tenemos en el ol y unset se utiliza para eliminar el estilo ya sea heredado o no, se quedara todo
    con la fuente principal*/
}

Ejemplos

.block{
    border: 3px solid black;
}

section{
    border: 5px solid blue;
}


section.block h2, h1{ /*Esto lo hacemos para cambiar solo los h2 que estan dentro del padre section, se puede hacer con todos de esta manera no afectara a todos los h2 solo los que cumplan +
    esa condicion. Le ponemos una coma para que tambien afecte a nuestro h1 u otro elemente que queramos que cambie*/
    font-size: 36px;
}

* {/*Dado que esto es un selecctor poco espeficico cualquier selector mas especifiso se sobrepondra a este y no afectara ninguna propiedad*/
    font-size: 24px;
}

Los selectores de Id se consideran mas especificos que los selectores de class. Si se tiene que elegir entre la norma de class e Id prebalecera la de Id.
Pero aun asi lo mas especifico es darle estilo desde nuestro HTML directamente, esto anulara cualquier norma de css que tengamos en la parte que se la hayamos dado