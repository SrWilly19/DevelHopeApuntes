Hooks ---- Ganchos
Vamos a tener una vision general de lo que hacen estos ganchos que son los mas comunes

useState: Es un gancho que nos permitira administrar el estado de un componente.
useEffect: Es un gancho que nos permitira ejecutar efectos secundarios dentro de un componente. Nos permitira ejecutar acciones cada vez que ocurra algo.
useContext: Nos permitira acceder al valor de un contexto 
useRef: Nos permitira acceder a ciertos nodos DOM creados por React cada vez que muestre algo por pantalla
useMemo: Es un gancho que nos permite memorizar el resultado de calculos costosos.

Los ganchos siempre deben llamarse en el mismo numero y en el mismo orden desde dentro de un componente de funcion.
Cuando usa un gancho, debe recordar que dentro de su componente de funcion, siempre debe llamar al mismo numero de ganchos y siempre debe llamar a los ganchos 
que ha llamado en el mismo orden.
Esto significa que solo podra llamar a ganchos desde el nivel superior de su componente de funcion, no podra llamar a ganchos, desde, por ejemplo, dentro de un controlador de eventos
No podra llamar a ganchos desde dentro de una declaracion if
No podra llamar a un gancho condicionalmente
No podra llamar a un gancho una cantidad de veces que depende de la cantidad de elementos dentro de una matriz y nada de eso
Los ganchos solo se pueden llamar desde dentro de un componente de funcion y tambien se pueden llamar dentro de ganchos personalizados.
Se debe a que necesitan poder conectarse dentro de las partes internas de React
Los ganchos son algo especifico de React y no son algo que pueda llamar fuera de React

Una variable de estado puede  ser de cualquier tipo que queramos y puede tener cualqueir valor inicial que queramos por lo que podemos tener variables de estado que representen numeros,
otras que representen cadenas, otras que representen objetos, matrices, lo que queramos.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
useState:
Es un enlace que nos permitira rastrear el valor de una sola variable de estado y nos permitira actualizarla.
La funcion useState recibe el valor inicial de la varibale de estado como su unico parametro.
Entonces le decimos a React que queremos crear una nueva varibale deestado llamando a useState y podemos pasar a React el valor inicial de esta varible de estado.
Por ejemplo: 
1-Le podriamos decir que nuestro contador debera comenzar desde 0 para que podamos pasarle el valor 0
2-Nos devuelve una matriz. No es una matriz regular, es algo llamado tupla*.
*Una tupla es una estructura de datos que e reprensta como un arreglo pero que contiene un numero especifico de elementos y cada uno de los elementos de este arreglo tiene
un rol muy especifico, tiene un significado muy especifico. 
3-Lo que devuelve es en realidad una tupla que contiene dos elementos. El primer elemento es el valor actual de la variable de estado y el segundo elemento es una funcion que podemos 
llamar en cualquier momento para actualizar el valor de la variable de estado.
4-El primer elemento de la matriz va dentro de la varibale de contador, el segundo elemento de la matriz va dentro de la variable setCounter. Sabemos que el primero es la variable de 
estado y el segundo es la funcion que podemos utilizar para actualizar la variable de estado.
Para actualizar el contador tendremos que utilizar la funcion de actualizacion que nos brinda React, por lo que
Sintaxis:
funtion handleCounterIncrement(){
    //Esto solo lo podemos hacer una vez ya que React no actualiza el componente al momento si no que lo hace cuando puede, entonces si le metemos otro mas podria hacer el mismo incremento
    //de 0 + 1. 
    setCounter(counter + 1 )
    //Si queremos hacerlo de otra manera en la que si que podran incrementar mas numeros de una vez, tendrimos que cambiar la Sintaxis
    setCounter((c) => c + 1)
    setCounter((c) => c + 1)
    //De esta manera estamos cogiendo la variable y la estamos actualizando no estamos esperando a que react nos la actualize, de esta manera si podriamos duplicar esto. 
    //Estamos cogiendo la variable mas reciente, por lo que si otra funcion la actualizado nosotros tendremos el valor inmediato que es en realidad el correcto
}


const [counter, setCounter] = useState(0)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
useEffect:
Este gancho nos permite ejecutar efectos secuandarios dentro de nuestros componentes, por lo tanto nos permite reaccionar al cambio dealgunas variables dentro de nuestro codigo
Esta variable puede ser un accesorio, puede ser una varibale de estado, puede ser lo que quieras.
Puedo ejecutar tantos useEffects como quiera dentro de mi componente
Recibe dos parametros, el primer parametro es la funcion que queremos que se ejecute cada vez que algo cambie. El segundo parametro es una matriz de valores que queremos que reaccionene para monitorear
Entonces cada vez que cambie cualquiera de estos valores dentro de la matriz, se ejecutara la funcion que le hemos pasado a useEffect como primer parametro
Cuando cargamos la pagina por primera vez tambien nos ense単a el mensaje con un 0, y esto se debe a que ejecuta la funcion no solo cuando cambia cualquiera de los valores dentro de esta matriz 
Sino que tambien ejecuta la funcion tan pronto como el componente se procesa por primera vez
Las condiciones para que se ejecute esta funcion son tan pronto como se monte o tan pronto como cambie cualquiera de los valerps dentro de esta matriz
Le permite limpiar los efectos de un efecto secundario si el efecto secundario necesita alguna limpieza
Cada vez quye tiene algo que se ejecuta y que puede seguir ejecutandose cada vez que se desmonta su componente, siempre debe recordar que debe limpiarlo usted mismo.
Limpiar despues de usted mismo significa que necesita una forma de detener la ejecucion de esta operacion para evitar que se ejecute incluso cuando el componente se ha desmontado.
useEffect es un gancho que recibe un efecto secundario que devuelve una funcion de limpieza
La funcion de limpieza puede hacer lo que necesitemos para limpiar las operaciones que comenzamos cuando se ejecuto el efecto, podemos detener un intervalo usando la funcion clearInterval, que nuevamente
es una funcion global disponible en la mayoria de los tiempos de ejecucion de JavaScript. La funcion clearInterval recibe un numero, un ID, que representa el intervalo que queremos borrar.多Como obtenemos la
ID  del intervalo que hemos creado aqui? setInterval es una funcion que devuelve el ID del intervalo que acaba de crear, simplemente podemos guardar este ID dentro de una variable. Puedo enviar este ID
de intervalo a la funcion clearInterval para saber que cada vez que se limpia mi efecto, se destruye el intervalo. Asi que ahora la pregunta es 多Cuando se limpia un efecto? Un efecto se limpia justo antes
de que el componente este a punto de ser desmontado

Primer parametro es el efecto, la funcion que queremos que se ejecute cuando algo suceda
El segundo parametro es una matriz, entonces simplemente podemos crear una nueva matriz usando algunos parentesis cuadrados, y dentro de esta matriz podemos colocar todas las variables que queremos 
que react observe para ejecutar el efecta cada vez que cambie una de estas variables. Puedo tener tantos valores como desee dentro de esta matriz
useEffect(() => {console.log(`The value of the counter is ${counter}`)},[counter] )

Si dejo mi matriz de dependencia vacia, puedo esperar que mi funcion se ejecute solo una vez tan pronto como se monte el componente
useEffect(() => {
    console.log(`I have been mounted`)
}, [])

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
event.target: 
Si paso el mouse sobre este elemento, puedo ver que el boton se resalta dentro de la pagina porque event.target es actualmnete, el valor de la propiedad event.target es actualmente una
referencia al nodo DOM que reporesneta el boton en si 

La diferencia entre el destino y el destino actual es que el destino represneta  que elemento ha activado el evento, mientras que el destino actual represneta el elemento al que se adjunto
realmente el evento
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Preguntar como funciona lo de event.stopPropagation();
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FORMULARIOS:
Los formularios se construyen utilizando componentes controlados o componentes no controlados:
-Componente controlado: Es un componente que no mantiene un estado interno de su contenido, sino que depende del componente principal para proporcionarle el valor actual y notifica al
principal tan pronto como el usuario intenta cambiarlo. 多Que significa esta oracion? Significa que un componente controlado es un componente que recibe del padre el valor que necesita
mostrar al usuario y notifica al padre tan pronto com el usuario intenta escribir algo del componente mismo, para interactuar con el valor contenido dentro el componente mismo.
Entonces, un componente controlado es un componente que depende completamente del padre para mantener el estado y decirle lo que necesita mostrar dentro de el. Le ofrece un control 
completo sobre lo que puede mostrar dentro de la entrada y lo que deberia suceder cuando el usuario interactua con la entrada.
Este concepto se aplica a las entradas, pero tambien se puede aplicar a cualquier otro tipo de componente que escriba con React.
Cualquier componente que en lugar de mantener un estado interno, dependa de informacion externa para mostrar algun contenido y notificar al componente principal tan pronto como el usuario
interactue con este contenido puede considerarse un componente controlado.

-Componente no controlado: Mantiene un estado interno del valor que contiene y no notifica a nadie cuando el usuario esta interactuando con este contenido. Puede notificar al padre cuando
el usuario interactua con el contenido, pero no tiene que hacerlo. Es un componente que implementa por completo la logica necesaria para mantener su estado interno y actualizar su estado
interno.
Una entrada no controlada es una entrada que se usa tal cual y no recibe el valor que necesita para mostrarse como accesorio y no recibe un controlador de eventos cuando el usuario escribe
algo dentro la entrada. Es un componente que no depende de un componente principal para mantener el estado, sino que mantiene el estado completamente dentro de si mismo. Son mas faciles 
de usar porque no requieren que implemente una logica externa para mantener su estado, pero tambien ofrece menos personalizacion porque no puede decidir que se muestra dentro del 
componente y que deberia suceder cuando el valor del componente cambia y eso se debe a que el componente en si mantiene el estado y no puede cambiar como se mantiene el estado dentro del 
componente en si.

Los componente controlados le ofrecen un mayor control a expensas de escribir mas codigo para manejarlois, mientras que los componentes no controlados son mas faciles de implementar porque
no tiene que escribir tanto codigo para usarlos, pero tambien ofrecen menos controlo sobre los componentes controlados.

FORMULARIOS NO CONTROLADOS: 
Son exactamente lo contrario de los formularios controlados porque los componentes no controlados son componentes que mantienen su propio estado y no dependen del padre para saber que deben
mostrar y que sucede cuando el usuario intenta interactuar con ellos